generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  name      String
  bio       String?
  avatar    String?
  ansPoints Float    @default(0)
  examPrep  String[]
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations with explicit names
  questions           Question[]
  answers             Answer[]
  comments            Comment[]
  votes               Vote[]
  sentMessages        ChatMessage[] @relation("MessageSender")
  receivedMessages    ChatMessage[] @relation("MessageReceiver")
  reports             Report[]
  reviewRequests      ReviewRequest[]
  studentSessions     Session[] @relation("SessionStudent")
  expertSessions      Session[] @relation("SessionExpert")
  studyProgress       StudyProgress[]

  @@map("users")
}

model Question {
  id          String   @id @default(cuid())
  title       String
  content     String
  latex       String?
  subject     String
  exam        String
  difficulty  String
  authorId    String
  isAnswered  Boolean  @default(false)
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author   User       @relation(fields: [authorId], references: [id])
  answers  Answer[]
  comments Comment[]
  votes    Vote[]
  reports  Report[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  latex      String?
  isCorrect  Boolean  @default(false)
  isAI       Boolean  @default(false)
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  questionId String
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question       Question        @relation(fields: [questionId], references: [id])
  author         User            @relation(fields: [authorId], references: [id])
  comments       Comment[]
  votes          Vote[]
  reports        Report[]
  reviewRequests ReviewRequest[]

  @@map("answers")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  latex      String?
  questionId String?
  answerId   String?
  authorId   String
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])
  votes    Vote[]

  @@map("comments")
}

model Vote {
  id         String    @id @default(cuid())
  type       VoteType
  userId     String
  questionId String?
  answerId   String?
  commentId  String?
  createdAt  DateTime  @default(now())

  user     User      @relation(fields: [userId], references: [id])
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])
  comment  Comment?  @relation(fields: [commentId], references: [id])

  @@unique([userId, questionId])
  @@unique([userId, answerId])
  @@unique([userId, commentId])
  @@map("votes")
}

model ChatMessage {
  id         String      @id @default(cuid())
  content    String
  latex      String?
  type       MessageType @default(TEXT)
  senderId   String
  receiverId String?
  roomId     String?
  isExpert   Boolean     @default(false)
  createdAt  DateTime    @default(now())

  sender   User  @relation("MessageSender", fields: [senderId], references: [id])
  receiver User? @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@map("chat_messages")
}

model Report {
  id         String     @id @default(cuid())
  type       ReportType
  reason     String
  content    String?
  status     String     @default("PENDING")
  reporterId String
  questionId String?
  answerId   String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  reporter User      @relation(fields: [reporterId], references: [id])
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("reports")
}

model ReviewRequest {
  id        String            @id @default(cuid())
  type      ReviewRequestType
  status    String            @default("PENDING")
  notes     String?
  userId    String
  answerId  String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  answer Answer @relation(fields: [answerId], references: [id])

  @@map("review_requests")
}

model Session {
  id          String    @id @default(cuid())
  title       String
  description String?
  subject     String
  datetime    DateTime
  duration    Int
  isBooked    Boolean   @default(false)
  studentId   String
  expertId    String?
  status      String    @default("REQUESTED")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  student User  @relation("SessionStudent", fields: [studentId], references: [id])
  expert  User? @relation("SessionExpert", fields: [expertId], references: [id])

  @@map("sessions")
}

model StudyMaterial {
  id          String   @id @default(cuid())
  title       String
  content     String
  latex       String?
  subject     String
  exam        String
  chapter     String
  order       Int
  type        String   @default("CONTENT")
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  progress StudyProgress[]

  @@map("study_materials")
}

model StudyProgress {
  id               String   @id @default(cuid())
  userId           String
  studyMaterialId  String
  isCompleted      Boolean  @default(false)
  score            Float?
  timeSpent        Int      @default(0)
  lastAccessedAt   DateTime @default(now())
  createdAt        DateTime @default(now())

  user          User          @relation(fields: [userId], references: [id])
  studyMaterial StudyMaterial @relation(fields: [studyMaterialId], references: [id])

  @@unique([userId, studyMaterialId])
  @@map("study_progress")
}

model PYQ {
  id       String @id @default(cuid())
  exam     String
  year     String
  subject  String
  fileName String
  fileUrl  String
  createdAt DateTime @default(now())

  @@map("pyqs")
}

enum Role {
  STUDENT
  EXPERT
  ADMIN
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum ReportType {
  QUESTION
  ANSWER
  COMMENT
  USER
}

enum ReviewRequestType {
  AI_ANSWER
  USER_ANSWER
}